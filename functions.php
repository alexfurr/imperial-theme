<?php// Include medlearn Classesinclude_once get_template_directory() . '/libs/feedback/class-feedback.php';$imperial_theme = new imperial_theme();class imperial_theme{	//~~~~~	function __construct ()	{				$this->addWPActions();			}/*	---------------------------	PRIMARY HOOKS INTO WP 	--------------------------- */		function addWPActions ()	{						add_action( 'after_setup_theme', array ($this, 'imperial_med_setup' ) );				add_action( 'wp_enqueue_scripts', array ($this, 'imperial_med_load_scripts' ), 1 );				add_action( 'wp_enqueue_scripts', array ($this, 'imperial_med_load_styles' ), 1 );				add_filter( 'document_title_separator', array ($this, 'imperial_med_document_title_separator' ) );				add_filter( 'the_content_more_link', array ($this, 'imperial_med_read_more_link' ) );				add_filter( 'excerpt_more', array ($this, 'imperial_med_excerpt_read_more_link' ) );				add_action( 'widgets_init', array ($this, 'imperial_med_widgets_init' ) );				add_action( 'comment_form_before', array ($this, 'imperial_med_enqueue_comment_reply_script' ) );				//add_filter( 'get_comments_number', array ($this, 'imperial_med_comment_count', 0 ) );				add_action( 'admin_menu' , array ($this, 'remove_metaboxes' ) );				add_action( 'admin_enqueue_scripts', array( $this, 'adminSettingsEnqueues' ) );				/* Remove Dashboard Widgets */		add_action('admin_menu', array( $this, 'isa_disable_dashboard_widgets') );				// Add options for auto adding page children		// Post type metaboxes		add_action( 'add_meta_boxes', array( $this, 'addPageOptionsMetabox' ));				add_action( 'save_post', array( $this, 'savePostData' ) );		add_filter( 'template_include', array($this, 'checkPageTemplate' ) );		// Create Theme Settings Page		add_action( 'admin_menu', array( $this, 'createThemeSettingsMenu' ) );											}	function imperial_med_setup()	{			add_theme_support( 'title-tag' );		add_theme_support( 'automatic-feed-links' );		add_theme_support( 'post-thumbnails' );		add_theme_support( 'html5', array( 'search-form' ) );									$defaults = array(			'width'                  => 1200,			'height'                 => 120,		);		add_theme_support( 'custom-header', $defaults );						global $content_width;		if ( ! isset( $content_width ) ) $content_width = 640;		register_nav_menus(			array( 'main-menu' => esc_html__( 'Main Menu', 'imperial_med' ) )		);	}			// Load the CSS in the HEAD so we don't get horrible redraws	function imperial_med_load_styles()	{		wp_enqueue_style( 'imperial_med-style', get_stylesheet_uri() );		wp_enqueue_style( 'imperial-med-roboto', "//fonts.googleapis.com/css?family=Roboto:100,100i,300,400,400i,700" );		wp_enqueue_style( 'imperial-med-open-sans', "//fonts.googleapis.com/css?family=Open+Sans:100,300,400,600,300italic,400italic,600italic" );						// Load up side bar nav styles 		wp_register_style( 'imperial-sidenav',  get_template_directory_uri().'/css/side-nav.css' );		wp_enqueue_style( 'imperial-sidenav' );					}			function imperial_med_load_scripts()	{		wp_enqueue_script( 'jquery' );		//wp_register_script( 'imperial_med-videos', get_template_directory_uri() . '/js/videos.js' );		//wp_enqueue_script( 'imperial_med-videos' );						//wp_add_inline_script( 'imperial_med-videos', 'jQuery(document).ready(function($){$("#wrapper").vids();});' );				$tabsFolder = get_template_directory_uri().'/libs/tabs/';		wp_register_style( 'ek-tabs-styles',  $tabsFolder . 'tabs.css' );		wp_enqueue_style( 'ek-tabs-styles' );				wp_enqueue_script('ek-tabs-js', $tabsFolder. 'tabs.js', array( 'jquery' ) ); #JS for managing resopnse options				// Custom JS 		wp_enqueue_script('imperial-custom-js', get_template_directory_uri(). '/js/imperial-theme.js', array( 'jquery' ) ); #Custom JS			}		function adminSettingsEnqueues ()	{		//WP includes				wp_enqueue_script('jquery');		wp_enqueue_script('jquery-ui-core');		wp_enqueue_script( 'jquery-ui-datepicker' );					}							function imperial_med_document_title_separator( $sep )	{		$sep = "|";		return $sep;	}		function imperial_med_read_more_link()	{		if ( ! is_admin() ) {			return ' <a href="' . esc_url( get_permalink() ) . '" class="more-link">...</a>';		}	}				function imperial_med_excerpt_read_more_link( $more )	{		if ( ! is_admin() ) {		global $post;		return ' <a href="' . esc_url( get_permalink( $post->ID ) ) . '" class="more-link">...</a>';		}	}		function imperial_med_widgets_init()	{		register_sidebar( array (		'name' => esc_html__( 'Sidebar Widget Area', 'imperial_med' ),		'id' => 'primary-widget-area',		'before_widget' => '<li id="%1$s" class="widget-container %2$s">',		'after_widget' => "</li>",		'before_title' => '<h3 class="widget-title">',		'after_title' => '</h3>',		) );	}		function imperial_med_enqueue_comment_reply_script()	{		if ( get_option( 'thread_comments' ) ) { wp_enqueue_script( 'comment-reply' ); }	}		function imperial_med_comment_count( $count )	{		if ( ! is_admin() )		{			global $id;			$get_comments = get_comments( 'status=approve&post_id=' . $id );			$comments_by_type = separate_comments( $get_comments );			return count( $comments_by_type['comment'] );		} else {			return $count;		}	}		/* Hide unneeded metaboxes */	function remove_metaboxes()	{				remove_meta_box( 'postcustom' , 'page' , 'normal' ); 		remove_meta_box( 'postcustom' , 'glossary' , 'normal' );				remove_meta_box( 'postexcerpt' , 'page' , 'normal' ); 		remove_meta_box( 'postexcerpt' , 'glossary' , 'normal' );				remove_meta_box( 'authordiv' , 'page' , 'normal' ); 		remove_meta_box( 'authordiv' , 'glossary' , 'normal' );					}				// Remove WP admin dashboard widgets	function isa_disable_dashboard_widgets() {		remove_meta_box('dashboard_right_now', 'dashboard', 'normal');// Remove "At a Glance"		remove_meta_box('dashboard_activity', 'dashboard', 'normal');// Remove "Activity" which includes "Recent Comments"		remove_meta_box('dashboard_quick_press', 'dashboard', 'side');// Remove Quick Draft		remove_meta_box('dashboard_primary', 'dashboard', 'core');// Remove WordPress Events and News	}		// Register the metaboxes	function  addPageOptionsMetabox()	{				//Privacy Metabox		$id 			= 'imperial_page_options';		$title 			= 'Page Options';		$drawCallback 	= array( $this, 'drawMetaBox_options' );		$screen 		= 'page';		$context 		= 'side';		$priority 		= 'default';		$callbackArgs 	= array();							add_meta_box( 			$id, 			$title, 			$drawCallback, 			$screen, 			$context,			$priority, 			$callbackArgs		);						}				function drawMetaBox_options($post, $metabox)	{				// Add Nonce Field		wp_nonce_field( 'save_imperial_page_options_nonce', 'imperial_page_options_nonce' );				$showPageChildren = get_post_meta( $post->ID, 'showPageChildren', true );		$showPageChildrenStyle = get_post_meta( $post->ID, 'showPageChildrenStyle', true );		$childrenLocation = get_post_meta( $post->ID, 'childrenLocation', true );				echo '<label for="showPageChildren">';		echo '<input type="checkbox" name="showPageChildren" id="showPageChildren" ';		if($showPageChildren=="on")		{			echo ' checked ';		}		echo '/>Show page children on this page</label>';		echo '</label>';		echo '<div id="showPageChildrenStyleDiv"style="padding-top:10px; ';		if($showPageChildren=="")		{			echo 'display:none;';		}				echo '">';				echo '<label for="showPageChildrenStyle">Style</label><br/>';		echo '<select name="showPageChildrenStyle" id="showPageChildrenStyle">';				$myStyles = array		(			"" => "Small Tiled Boxes",			"boxed-large" => "Large Tiled Boxes",			"circles-tiled" => "Tiled Circles",			"box-list" => "List with excerpt",		);							foreach ($myStyles as $thisStyle => $styleInfo)		{			echo '<option value="'.$thisStyle.'" ';						if($showPageChildrenStyle==$thisStyle){echo ' selected ';}						echo '>'.$styleInfo.'</option>';		}				echo '</select>';								echo '<br/>';						echo '<label for="childrenLocation">Box Location</label><br/>';		echo '<select name="childrenLocation" id="childrenLocation">';						$myLocations = array		(			"Top of page" => "",			"Bottom of page" => "bottom",		);							foreach ($myLocations as $thisLocation => $location)		{			echo '<option value="'.$location.'" ';						if($childrenLocation==$location){echo ' selected ';}						echo '>'.$thisLocation.'</option>';		}		echo '</select>';								echo '</div>';				echo '<script>		jQuery( "#showPageChildren" ).click(function() {						console.log("Clicked");						jQuery( "#showPageChildrenStyleDiv" ).toggle( "fast");		});				</script>';	}		function savePostData( $post_id )	{				if ( empty( $_POST['post_type'] )  ) {			return;		}				if($_POST['post_type']<>"page" )		{			return;		}								if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {			return;		}						// Verify that the nonce is valid.		if ( ! wp_verify_nonce( $_POST['imperial_page_options_nonce'], 'save_imperial_page_options_nonce' ) ) {			return;		}						if( ! current_user_can( 'edit_posts' ) ) {			return;		}				$showPageChildren = ( isset( $_POST['showPageChildren'] ) ) ? 'on' : '';		update_post_meta( 			$post_id, 			'showPageChildren', 			$showPageChildren		);						if($showPageChildren=="on")		{			update_post_meta( 			$post_id, 			'showPageChildrenStyle', 			$_POST['showPageChildrenStyle']			);						update_post_meta( 			$post_id, 			'childrenLocation', 			$_POST['childrenLocation']			);					}		}			function checkPageTemplate($original_template )	{		global $post;			if(is_admin() )		{			return $content;		}						// Check if parent page has the "showPageChildren" and if so add a submenu page as its a children				$currentPageID = get_the_ID();		$parentPageID = wp_get_post_parent_id( $currentPageID ); 				if($parentPageID<>0)		{			$parentShowPageChildren = get_post_meta( $parentPageID, 'showPageChildren', true );											if($parentShowPageChildren=="on" && is_search()==false)			{				$newTemplate =  get_template_directory() . '/template-subpage.php';								return $newTemplate;							}		}						$showPageChildren = get_post_meta( $currentPageID, 'showPageChildren', true );					if($showPageChildren=="on" && is_search()==false)		{			$newTemplate =  get_template_directory() . '/template-parent.php';							return $newTemplate;								}			return $original_template;			}			function createThemeSettingsMenu ()	{		$parentSlug 	= "settings.php";		$page_title 	= "Theme Options";		$menu_title		= "Theme Options";		$menu_slug		= "theme-options";		$drawFunction	= array( $this, 'drawThemeSettingsPage' );		$myCapability = "manage_options";		add_options_page($page_title, $menu_title, $myCapability, $menu_slug, $drawFunction);		}			//~~~~~ Drawing	function drawThemeSettingsPage()	{		include_once( dirname(__FILE__) . '/admin/theme-settings.php');	}		} // End of Class// Globally set this icon$editPageIcon = '<i class="fas fa-edit"></i>';/* Helpers */function imperial_comments1($comment, $args, $depth) {   $GLOBALS['comment'] = $comment; ?>   	<li <?php comment_class(); ?> id="li-comment-<?php comment_ID() ?>">					<div class="comment-intro">			<em>commented on</em> 			<a class="comment-permalink" href="<?php echo htmlspecialchars ( get_comment_link( $comment->comment_ID ) ) ?>"><?php printf(__('%1$s'), get_comment_date(), get_comment_time()) ?></a>			<em>by</em> 			<?php printf(__('%s'), get_comment_author_link()) ?>		</div>				<?php if ($comment->comment_approved == '0') : ?>			<em><php _e('Your comment is awaiting moderation.') ?></em><br />		<?php endif; ?>				<?php comment_text(); ?>				<div class="reply">		 <?php comment_reply_link(array_merge( $args, array('depth' => $depth, 'max_depth' => $args['max_depth']))) ?>		</div>		</li>		<?php   }	   	   	   function imperial_comments($comment, $args, $depth) {	$GLOBALS['comment'] = $comment;	extract($args, EXTR_SKIP);	if ( 'div' == $args['style'] ) {		//$tag = 'div';		$add_below = 'comment';	} else {		//$tag = 'li';		$add_below = 'div-comment';	}	?>		<div <?php comment_class( empty( $args['has_children'] ) ? '' : 'parent' ) ?> id="comment-<?php comment_ID() ?>">				<div id="div-comment-<?php comment_ID() ?>" class="comment-body">								<div class="postAvatar">					<?php					//if ( $args['avatar_size'] != 0 ) echo get_avatar( $comment, $args['avatar_size'] );					$authorID = $comment->user_id;					$authorInfo = get_userdata($authorID);					$fullname = $authorInfo->first_name.' '.$authorInfo->last_name;										echo '<div class="commentAvatar">';					//$avatar = BUZZwp::getUserAvatar( $authorID, '-square' );					//echo 	'<img src="'.$avatar.'?hash=' .BUZZutils::createHash() . '" width="50px"><br/>';					echo '</div>';										echo '<div class="commentAuthorInfo">';					echo '<span class="commentAuthorName">' . $fullname . '</span><br>';					printf( __('%1$s at %2$s'), get_comment_date(),  get_comment_time() );					echo '</div>';					?>				</div>						<div class="comment-content">					<?php 					if ( $comment->comment_approved == '0' ) : 					?>						<em class="comment-awaiting-moderation"><?php _e( 'Your comment is awaiting moderation.' ); ?></em>						<br />					<?php 					endif; 					?>									<?php comment_text(); ?>					<div>					<?php comment_reply_link( array_merge( $args, array( 'add_below' => $add_below, 'depth' => $depth, 'max_depth' => $args['max_depth'] ) ) ); ?>					</div>									</div>								<br class="clearB">		</div>		</div>		<?php}add_filter( 'comment_form_logged_in', '__return_empty_string' );?>